# Python version common to all platforms.
# If you want to build for a different version of python on different platforms, sorry.
# Submit a PR.
# Note that the ABI versions can be different -- you might want to use PyPy on Linux,
# but not on Mac.
[python]
version = [3, 12]
interpreter = "cp312" # CPython 3.12 compatible

# Platforms we want to support.
#
# A Reindeer platform is a collection of predicates, which are closely related
# to rustc/cargo's notion of a platform. If a conditional dependency matches
# against a platform's predicates, then it is included in the platform-specific
# dependencies in the rule.
#
# These same platforms and predicates are used in fixups.toml files, for
# platform-specific fixups (such as additional dependencies, extra sources,
# options, etc).
#
# Listed properties are a set of values, any of which can match a predicate.
# These match specific configurations of rustc, as shown with `rustc --target
# <TARGET> --print cfg`. Unlisted properties are "don't care" or "match
# anything"
#
# The platform key sets the name of the platform in `platform_deps` /
# `named_platform_deps`. If it is "DEFAULT" then the platform's dependencies are
# put into the normal `deps` / `named_deps`.

# x86_64-unknown-linux-gnu
[platform.linux-x86_64]
platform = "linux"
arch = ["x86_64"]
abi = ["cp312", "abi3", "none"]
glibc_version = [2, 38]
manylib2014_compatible = true

# aarch64-unknown-linux-gnu
[platform.linux-arm64]
platform = "linux"
arch = ["x86_64"]
abi = ["cp312", "abi3", "none"]
glibc_version = [2, 38]
manylib2014_compatible = true

# macOS - x86_64-apple-darwin
[platform.macos-x86_64]
platform = "linux"
arch = "x86_64"
abi = ["cp312", "abi3", "none"]

# macOS - arm64-apple-darwin
[platform.macos-arm64]
platform = "darwin"
arch = "arm64"
abi = ["cp312", "abi3", "none"]

# Windows not supported yet
#
# # Windows with MSVC toolchain - x86_64-pc-windows-msvc
# [platform.windows-msvc]
# x86_64-pc-windows-msvc = []
# target_family = ["windows"]
# target_os = ["windows"]
# target_env = ["msvc"]
# target_arch = ["x86_64"]
#
# # Windows with GNU toolchain - x86_64-pc-windows-gnu
# [platform.windows-gnu]
# x86_64-pc-windows-gnu = []
# target_family = ["windows"]
# target_os = ["windows"]
# target_env = ["gnu"]
# target_arch = ["x86_64"]

# Configuration for poetry (used for resolving dependencies)
[poetry]

# Configuration for generated BUCK file
[buck]
# Name of the generated file
file_name = "BUCK" # default

# Rules used for various kinds of targets. These rules don't directly correspond
# with BUCK rules - they have extra attributes such as per-platform settings.
# The intent is that you provide a set of macro definitions which resolve them
# to appropriate underlying rules suitable for your environment. (This may also
# work for Buck-like build systems such as Bazel.)

# Load the macros to which the rules above will resolve.
buckfile_imports = """
load("@prelude//rust:cargo_buildscript.bzl", "buildscript_run")
load("@ainc//build_defs:cargo_package.bzl", "cargo")
"""

# Need a wrapper for alias that will evaluate the `platforms` attribute.
alias = "python.alias"
prebuilt_python_library = "prebuilt_python_library"
python_library = "python_library"

# Banner comment for the generated BUCK File.
# Turn off syntax highlighting in vim because it's just too slow
generated_file_header = """
## vim: set ft=none :
##
## This file is automatically @generated by elk and should not be changed by hand.
##
## See README.md for directions on how to update this.
##
"""
